;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;                                    ;;
;;    BrokenLisp Standard Library     ;;
;;                                    ;;
;;          Bradley Garagan           ;;
;;                                    ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; Identity function
(def (id x) x)

;; various car / cdr compositions
(def (caar xs)  (car (car xs)))
(def (cdar xs)  (cdr (car xs)))
(def (cadr xs)  (car (cdr xs)))
(def (caaar xs) (car (car (car xs))))
(def (cddr xs)  (cdr (cdr xs)))
(def (cdddr xs) (cdr (cdr (cdr xs))))

;; list index
(def (index xs k)
     (if (nil? xs)
         Nil
         (if (eq? k 0)
             (car xs)
             (index
                 (cdr xs)
                 (- k 1)))))

;; map
(def (map f xs)
     (if (nil? xs)
         Nil
         (cons
             (f (car xs))
             (map f (cdr xs)))))



;; filter
(def (filter p xs)
     (if (nil? xs)
         Nil
         (if (p (car xs))
             (cons (car xs)
                   (filter p (cdr xs)))
             (filter p (cdr xs)))))

;; fold
(def (fold f k xs)
     (if (nil? xs)
         k
         (fold f (f k (car xs)) (cdr xs))))
(def (fold-one f xs)
     (fold f (car xs) (cdr xs)))
         
;; max / min
(def (max a b)
     (if (gt? a b)
         a
         b))
(def (min a b)
     (if (lt? a b)
         a
         b))
(def (maximum xs)
     (fold-one max xs))
(def (minimum xs)
     (fold-one min xs))

;; List functions
(def (take k xs)
     (if (or (eq? k 0)
             (nil? xs))
         Nil
         (cons (car xs)
               (take (- k 1) (cdr xs)))))
(def (drop k xs)
     (if (nil? xs)
         Nil
         (if (eq? k 0)
             xs
             (drop (- k 1) (cdr xs)))))
(def (slice i j xs)
     (take (- j i) (drop i xs)))

;; any / all
(def (any? f xs) (fold-one or (map f xs)))
(def (all? f xs) (fold-one and (map f xs)))

;; matches after / before point
(def (match-after-pt? r)
     (matches?
        (strdrop (column-number) (current-line))
        (strcat "^" r)))

(def (match-before-pt? r)
     (matches?
        (strtake (column-number) (current-line))
        (strcat r "$")))

(def (set-indent n)
     (begin (indent-line -1000)
            (indent-line n)))

(def (backspace n)
     (if (eq? n 0)
         Nil
         (begin (normal "i<BS>jkl")
                (backspace (- n 1)))))

(def (bs x)
     (if (match-before-pt? " {4}")
         (backspace 4)
         (backspace 1)))

(def (get-line s c)
     (if (eq? c (chr 13))
         s
         (get-line (strcat s c) (get-char))))    

(def (insert n)
     (if (eq? n 0)
         Nil
         (begin
             (normal (strcat "i" (get-line "" "")))
             (insert (- n 1)))))
